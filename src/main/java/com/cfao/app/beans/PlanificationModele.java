package com.cfao.app.beans;

// Generated Aug 29, 2017 10:30:32 AM by Hibernate Tools 4.3.1


import javafx.beans.property.*;
import javafx.collections.FXCollections;

import javax.persistence.*;

import java.util.List;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * PlanificationModele generated by hbm2java
 */
@Entity
@Table(name = "planification_modele"
)
public class PlanificationModele implements java.io.Serializable {


    private IntegerProperty idplanificationmodele = new SimpleIntegerProperty();
    private ObjectProperty<Sujet> sujet = new SimpleObjectProperty<>();
    private ListProperty<Tache> taches = new SimpleListProperty<>();
    private ListProperty<Document> documents = new SimpleListProperty<>();
    private ObjectProperty<UserProfil> responsable = new SimpleObjectProperty<>();
    private ObjectProperty<UserProfil> validation = new SimpleObjectProperty<>();
    private SimpleIntegerProperty timing = new SimpleIntegerProperty();
    private StringProperty remarque = new SimpleStringProperty();
    private StringProperty commentaire = new SimpleStringProperty();

    public PlanificationModele() {
    }

    public PlanificationModele(Sujet sujet, List<Tache> taches, int timing) {
        this.sujet.set(sujet);
        this.taches.set(FXCollections.observableArrayList(taches));
        this.timing.set(timing);
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)
    @Column(name = "IDPLANIFICATIONMODELE", unique = true, nullable = false)
    public Integer getIdplanificationmodele() {
        return this.idplanificationmodele.get();
    }

    public void setIdplanificationmodele(Integer idplanificationmodele) {
        this.idplanificationmodele.set(idplanificationmodele);
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "SUJET", nullable = false)
    public Sujet getSujet() {
        return this.sujet.get();
    }

    public void setSujet(Sujet sujet) {
        this.sujet.set(sujet);
    }


    @ManyToMany(fetch=FetchType.LAZY)
    @JoinTable(name="planification_modele_tache", joinColumns = {
            @JoinColumn(name="PLANIFICATIONMODELE", nullable=false, updatable=false) }, inverseJoinColumns = {
            @JoinColumn(name="TACHE", nullable=false, updatable=false) })
    public List<Tache> getTaches() {
        return this.taches.get();
    }

    public void setTaches(List<Tache> taches) {
        this.taches.set(FXCollections.observableArrayList(taches));
    }


    @Column(name = "TIMING", nullable = false)
    public Integer getTiming() {
        return this.timing.get();
    }

    public void setTiming(Integer timing) {
        this.timing.set(timing);
    }


    @Column(name = "REMARQUE", length=65535)
    public String getRemarque() {
        return remarque.get();
    }
    public void setRemarque(String remarque){
        this.remarque.set(remarque);
    }

    @Column(name="COMMENTAIRE", length=65535)
    public String getCommentaire() {
        return commentaire.get();
    }

    public StringProperty commentaireProperty() {
        return commentaire;
    }

    public void setCommentaire(String commentaire) {
        this.commentaire.set(commentaire);
    }
    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="RESPONSABLE", nullable=false)
    public UserProfil getResponsable() {
        return this.responsable.get();
    }

    public void setResponsable(UserProfil responsable) {
        this.responsable.set(responsable);
    }

    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="VALIDATION", nullable=false)
    public UserProfil getValidation() {
        return this.validation.get();
    }

    public void setValidation(UserProfil validation) {
        this.validation.set(validation);
    }
    @ManyToMany(fetch=FetchType.LAZY)
    @JoinTable(name="planification_modele_document", joinColumns = {
            @JoinColumn(name="PLANIFICATIONMODELE", nullable=false, updatable=false) }, inverseJoinColumns = {
            @JoinColumn(name="DOCUMENT", nullable=false, updatable=false) })
    public List<Document> getDocuments() {
        return this.documents.get();
    }

    public void setDocuments(List<Document> documents) {
        this.documents.set(FXCollections.observableArrayList(documents));
    }
}


