package com.cfao.app.beans;

import javafx.beans.property.*;
import javafx.collections.FXCollections;

import javax.persistence.*;
import java.util.List;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * Personnels generated by hbm2java
 */
@Entity
@Table(name="personnels")
public class Personnel implements java.io.Serializable {


    private SimpleIntegerProperty idpersonnel = new SimpleIntegerProperty();
    private SimpleStringProperty nom = new SimpleStringProperty();
    private SimpleStringProperty prenom = new SimpleStringProperty();
    private SimpleStringProperty adresse = new SimpleStringProperty();
    private SimpleStringProperty telephone = new SimpleStringProperty();
    private SimpleObjectProperty<Pays> pays = new SimpleObjectProperty<>();
    private ListProperty<Formation> formations = new SimpleListProperty<>();
    private ListProperty<Domaine> domaines = new SimpleListProperty<>();

    private SimpleStringProperty prestataire = new SimpleStringProperty();
    private SimpleStringProperty email = new SimpleStringProperty();

    public Personnel() {
    }


    public Personnel(String nom) {
        this.nom.set(nom);
    }
    public Personnel(String nom, String prenom, String adresse, String telephone, List<Formation> formations) {
        this.nom.set(nom);
        this.prenom.set(prenom);
        this.adresse.set(adresse);
        this.telephone.set(telephone);
        this.formations.set(FXCollections.observableArrayList(formations));
    }

    @Id @GeneratedValue(strategy=IDENTITY)
    @Column(name="IDPERSONNEL", unique=true, nullable=false)
    public Integer getIdpersonnel() {
        return this.idpersonnel.get();
    }

    public void setIdpersonnel(Integer idpersonnel) {
        this.idpersonnel.set(idpersonnel);
    }


    @Column(name="NOM", nullable=false, length=30)
    public String getNom() {
        return this.nom.get();
    }

    public void setNom(String nom) {
        this.nom.set(nom);
    }


    @Column(name="PRENOM", length=30)
    public String getPrenom() {
        return this.prenom.get();
    }

    public void setPrenom(String prenom) {
        this.prenom.set(prenom);
    }


    @Column(name="ADRESSE", length=50)
    public String getAdresse() {
        return this.adresse.get();
    }

    public void setAdresse(String adresse) {
        this.adresse.set(adresse);
    }


    @Column(name="TELEPHONE", length=20)
    public String getTelephone() {
        return this.telephone.get();
    }

    public StringProperty telephone(){return telephone;}

    public void setTelephone(String telephone) {
        this.telephone.set(telephone);
    }

    @ManyToMany(fetch=FetchType.LAZY)
    @JoinTable(name="formateurs",  joinColumns = {
            @JoinColumn(name="PERSONNEL", nullable=false, updatable=false) }, inverseJoinColumns = {
            @JoinColumn(name="FORMATION", nullable=false, updatable=false) })
    public List<Formation> getFormations() {
        return this.formations;
    }

    public void setFormations(List<Formation> formations) {
        this.formations.set(FXCollections.observableArrayList(formations));
    }

    public StringProperty infos(){
        return new SimpleStringProperty(this.toString());
    }

    @Override
    public String toString() {
        return getNom() + " " + getPrenom();
    }

    @ManyToMany
    @JoinTable(name="personnel_domaine", joinColumns = {
            @JoinColumn(name="PERSONNEL", nullable=false, updatable=false) }, inverseJoinColumns = {
            @JoinColumn(name="DOMAINE", nullable=false, updatable=false) })
    public List<Domaine> getDomaines() {
        return domaines.get();
    }

    public ListProperty<Domaine> domainesProperty() {
        return domaines;
    }

    public void setDomaines(List<Domaine> domaines) {
        this.domaines.set(FXCollections.observableArrayList(domaines));
    }

    public SimpleStringProperty nomProperty() {
        return nom;
    }

    public SimpleStringProperty adresseProperty() {
        return adresse;
    }


    @ManyToOne
    @JoinColumn(name = "PAYS")
    public Pays getPays() {
        return pays.get();
    }

    public SimpleObjectProperty<Pays> paysProperty() {
        return pays;
    }

    public void setPays(Pays pays) {
        this.pays.set(pays);
    }

    public SimpleStringProperty telephoneProperty() {
        return telephone;
    }

    @Column(name="PRESTATAIRE", length=150)
    public String getPrestataire() {
        return prestataire.get();
    }

    public SimpleStringProperty prestataireProperty() {
        return prestataire;
    }

    public void setPrestataire(String prestataire) {
        this.prestataire.set(prestataire);
    }

    @Column(name="EMAIL", length=50)
    public String getEmail() {
        return email.get();
    }

    public SimpleStringProperty emailProperty() {
        return email;
    }

    public void setEmail(String email) {
        this.email.set(email);
    }

    @Override
    public boolean equals(Object o){
        if(o instanceof Personnel){
            Personnel p = (Personnel)o;
            return p.getIdpersonnel().equals(this.getIdpersonnel());
        }
        return false;
    }
}

