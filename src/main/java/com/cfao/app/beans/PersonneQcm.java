package com.cfao.app.beans;


import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.property.SimpleObjectProperty;

import javax.persistence.*;
import java.time.LocalDate;
import java.util.Date;

/**
 * PersonneQcm generated by hbm2java
 */
@Entity
@Table(name = "personne_qcm"
)
public class PersonneQcm implements java.io.Serializable {


    private PersonneQcmId id = new PersonneQcmId();
    private ObjectProperty<Personne> personne = new SimpleObjectProperty<>();
    private ObjectProperty<Qcm> qcm = new SimpleObjectProperty<>();
    private ObjectProperty<Date> dateqcm = new SimpleObjectProperty<Date>();
    private SimpleDoubleProperty note = new SimpleDoubleProperty();
    private ObjectProperty<Date> createdAt = new SimpleObjectProperty<>();

    public PersonneQcm() {
    }

    public PersonneQcm(PersonneQcmId id, Personne personnes, Qcm qcm) {
        this.id = id;
        this.personne.set(personnes);
        this.qcm.set(qcm);
    }

    @EmbeddedId


    @AttributeOverrides({
            @AttributeOverride(name = "personne", column = @Column(name = "PERSONNE", nullable = false)),
            @AttributeOverride(name = "qcm", column = @Column(name = "QCM", nullable = false)),
            @AttributeOverride(name = "note", column = @Column(name = "NOTE", nullable = false, precision = 6))})
    public PersonneQcmId getId() {
        return this.id;
    }

    public void setId(PersonneQcmId id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "PERSONNE", nullable = false, insertable = false, updatable = false)
    public Personne getPersonne() {
        return this.personne.get();
    }

    public void setPersonne(Personne personnes) {
        this.personne.set(personnes);
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "QCM", nullable = false, insertable = false, updatable = false)
    public Qcm getQcm() {
        return this.qcm.get();
    }

    public void setQcm(Qcm qcm) {
        this.qcm.set(qcm);
    }

    @Override
    public String toString() {
        return "PersonneQcm{" +
                "id=" + id +
                ", personne=" + personne.get() +
                ", note=" + note +
                ", qcm=" + qcm.get() +
                '}';
    }


    @Temporal(TemporalType.DATE)
    @Column(name="DATEQCM", length=10, nullable = false)
    public Date getDateqcm() {
        if(dateqcm == null || dateqcm.get().equals("0000-00-00")){
            return new Date();
        }
        return dateqcm.get();
    }

    public ObjectProperty<LocalDate> dateqcmProperty() {
        return new SimpleObjectProperty<>(new java.sql.Date(dateqcm.get().getTime()).toLocalDate());
    }

    public void setDateqcm(Date dateqcm) {
        if(dateqcm == null || dateqcm.getTime() == 0){
            dateqcm = new Date();
        }
        this.dateqcm.set(dateqcm);
    }


    @Column(name = "NOTE", nullable = false, precision = 6)
    public Double getNote() {
        return note.get();
    }

    public SimpleDoubleProperty noteProperty() {
        return note;
    }

    public void setNote(Double note) {
        this.note.set(note);
    }

    @Column(name="CREATEDAT", columnDefinition="TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP")
    @Temporal(TemporalType.TIMESTAMP)
    public Date getCreatedAt() {
        return createdAt.get();
    }

    public ObjectProperty<LocalDate> createdAtProperty() {
        if(createdAt != null) {
            return new SimpleObjectProperty<>(new java.sql.Date(createdAt.get().getTime()).toLocalDate());
        }
        return new SimpleObjectProperty<>(new java.sql.Date(new Date().getTime()).toLocalDate());
    }

    public void setCreatedAt(Date createat) {
        this.createdAt.set(createat);
    }
}


