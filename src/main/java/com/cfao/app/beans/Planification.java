package com.cfao.app.beans;

// Generated Aug 29, 2017 3:29:44 AM by Hibernate Tools 4.3.1


        import javafx.beans.property.*;
        import javafx.collections.FXCollections;

        import javax.persistence.*;

        import java.util.List;

        import static javax.persistence.GenerationType.IDENTITY;

/**
 * Planifications generated by hbm2java
 */
@Entity
@Table(name="planifications"
)
public class Planification  implements java.io.Serializable {


    private IntegerProperty idplanification = new SimpleIntegerProperty();
    private ObjectProperty<Formation> formation = new SimpleObjectProperty<>();
    private ObjectProperty<Sujet> sujet = new SimpleObjectProperty<>();
    private ObjectProperty<UserProfil> responsable = new SimpleObjectProperty<>();
    private ObjectProperty<UserProfil> validation = new SimpleObjectProperty<>();
    private ListProperty<Tache> taches = new SimpleListProperty<>();
    private ListProperty<Document> documents = new SimpleListProperty<>();
    private IntegerProperty timing = new SimpleIntegerProperty();
    private BooleanProperty fait = new SimpleBooleanProperty();
    private StringProperty remarque = new SimpleStringProperty();
    private StringProperty commentaire = new SimpleStringProperty();


    public Planification() {
    }


    public Planification(Formation formation, Sujet sujet, int timing, boolean fait, String remarque) {
        this.formation.set(formation);
        this.sujet.set(sujet);
        this.timing.set(timing);
        this.fait.set(fait);
        this.remarque.set(remarque);
    }
    public Planification(Formation formation, Sujet sujet, List<Tache> taches, int timing, boolean fait, String remarque) {
        this.formation.set(formation);
        this.sujet.set(sujet);
        this.taches.set(FXCollections.observableArrayList(taches));
        this.timing.set(timing);
        this.fait.set(fait);
        this.remarque.set(remarque);
    }

    @Id @GeneratedValue(strategy=IDENTITY)


    @Column(name="IDPLANIFICATION", unique=true, nullable=false)
    public Integer getIdplanification() {
        return this.idplanification.get();
    }

    public void setIdplanification(Integer idplanification) {
        this.idplanification.set(idplanification);
    }

    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="FORMATION", nullable=false)
    public Formation getFormation() {
        return this.formation.get();
    }

    public void setFormation(Formation formation) {
        this.formation.set(formation);
    }

    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="SUJET", nullable=false)
    public Sujet getSujet() {
        return this.sujet.get();
    }

    public void setSujet(Sujet sujet) {
        this.sujet.set(sujet);
    }


    @Column(name="TIMING", nullable=false)
    public Integer getTiming() {
        return this.timing.get();
    }

    public void setTiming(Integer timing) {
        this.timing.set(timing);
    }


    @Column(name="FAIT", nullable=false)
    public Boolean isFait() {
        return this.fait.get();
    }

    public void setFait(Boolean fait) {
        this.fait.set(fait);
    }


    @Column(name="REMARQUE", length=65535)
    public String getRemarque() {
        return this.remarque.get();
    }

    public void setRemarque(String remarque) {
        this.remarque.set(remarque);
    }

    ObjectProperty<Formation> formationProperty(){
        return formation;
    }
    ObjectProperty<Sujet> sujetProperty(){
        return sujet;
    }
    ListProperty<Tache> tachesProperty(){
        return taches;
    }
    IntegerProperty timingProperty(){
        return timing;
    }
    BooleanProperty faitProperty(){
        return fait;
    }
    StringProperty remarqueProperty(){
        return remarque;
    }

    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="RESPONSABLE", nullable=false)
    public UserProfil getResponsable() {
        return this.responsable.get();
    }

    public void setResponsable(UserProfil responsable) {
        this.responsable.set(responsable);
    }

    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="VALIDATION", nullable=false)
    public UserProfil getValidation() {
        return this.validation.get();
    }

    public void setValidation(UserProfil validation) {
        this.validation.set(validation);
    }

    @ManyToMany(fetch=FetchType.LAZY)
    @JoinTable(name="planification_document", joinColumns = {
            @JoinColumn(name="PLANIFICATION", nullable=false, updatable=false) }, inverseJoinColumns = {
            @JoinColumn(name="DOCUMENT", nullable=false, updatable=false) })
    public List<Document> getDocuments() {
        return this.documents.get();
    }

    public void setDocuments(List<Document> documents) {
        this.documents.set(FXCollections.observableArrayList(documents));
    }

    @ManyToMany(fetch=FetchType.LAZY)
    @JoinTable(name="planification_tache",joinColumns = {
            @JoinColumn(name="PLANIFICATION", nullable=false, updatable=false) }, inverseJoinColumns = {
            @JoinColumn(name="TACHE", nullable=false, updatable=false) })
    public List<Tache> getTaches() {
        return this.taches.get();
    }

    public void setTaches(List<Tache> taches) {
        this.taches.set(FXCollections.observableArrayList(taches));
    }


    @Column(name="COMMENTAIRE", length=65535)
    public String getCommentaire() {
        return commentaire.get();
    }

    public StringProperty commentaireProperty() {
        return commentaire;
    }

    public void setCommentaire(String commentaire) {
        this.commentaire.set(commentaire);
    }
}


