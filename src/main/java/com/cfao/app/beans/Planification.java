package com.cfao.app.beans;

// Generated Aug 29, 2017 3:29:44 AM by Hibernate Tools 4.3.1


import javafx.beans.property.*;
import javafx.collections.FXCollections;

import javax.persistence.*;
import java.util.List;

import static javax.persistence.GenerationType.IDENTITY;

/**
 * Planifications generated by hbm2java
 */
@Entity
@Table(name = "planifications"
)
public class Planification implements java.io.Serializable {


    private IntegerProperty idplanification = new SimpleIntegerProperty();
    private ObjectProperty<Formation> formation = new SimpleObjectProperty<>();
    private ObjectProperty<Sujet> sujet = new SimpleObjectProperty<>();
    private ObjectProperty<UserProfil> responsable = new SimpleObjectProperty<>();
    private ObjectProperty<UserProfil> validation = new SimpleObjectProperty<>();
    private ListProperty<Tache> taches = new SimpleListProperty<>();
    private ListProperty<Document> documents = new SimpleListProperty<>();
    private SimpleIntegerProperty timing = new SimpleIntegerProperty();
    private BooleanProperty fait = new SimpleBooleanProperty();
    private StringProperty remarque = new SimpleStringProperty();
    private StringProperty commentaire = new SimpleStringProperty();

    private IntegerProperty duration = new SimpleIntegerProperty(0);
    private BooleanProperty alert = new SimpleBooleanProperty();


    public Planification() {
    }


    public Planification(Formation formation, Sujet sujet, int timing, boolean fait, String remarque) {
        this.formation.set(formation);
        this.sujet.set(sujet);
        this.timing.set(timing);
        this.fait.set(fait);
        this.remarque.set(remarque);
    }

    public Planification(Formation formation, Sujet sujet, List<Tache> taches, int timing, boolean fait, String remarque) {
        this.formation.set(formation);
        this.sujet.set(sujet);
        this.taches.set(FXCollections.observableArrayList(taches));
        this.timing.set(timing);
        this.fait.set(fait);
        this.remarque.set(remarque);
    }

    @Id
    @GeneratedValue(strategy = IDENTITY)


    @Column(name = "IDPLANIFICATION", unique = true, nullable = false)
    public Integer getIdplanification() {
        return this.idplanification.get();
    }

    public void setIdplanification(Integer idplanification) {
        this.idplanification.set(idplanification);
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "FORMATION", nullable = false)
    public Formation getFormation() {
        return this.formation.get();
    }

    public void setFormation(Formation formation) {
        this.formation.set(formation);
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "SUJET", nullable = false)
    public Sujet getSujet() {
        return this.sujet.get();
    }

    public void setSujet(Sujet sujet) {
        this.sujet.set(sujet);
    }


    @Column(name = "TIMING")
    public Integer getTiming() {
        return this.timing.get();
    }

    public void setTiming(Integer timing) {
        if (timing != null) {
            this.timing.set(timing);
        }
    }


    @Column(name = "FAIT", nullable = false)
    public Boolean isFait() {
        return this.fait.get();
    }

    public void setFait(Boolean fait) {
        this.fait.set(fait);
    }


    @Column(name = "REMARQUE", length = 65535)
    public String getRemarque() {
        return this.remarque.get();
    }

    public void setRemarque(String remarque) {
        this.remarque.set(remarque);
    }

    public ObjectProperty<Formation> formationProperty() {
        return formation;
    }

    public ObjectProperty<Sujet> sujetProperty() {
        return sujet;
    }

    public ListProperty<Tache> tachesProperty() {
        return taches;
    }

    public SimpleIntegerProperty timingProperty() {
        return timing;
    }

    public BooleanProperty faitProperty() {
        return fait;
    }

    public StringProperty remarqueProperty() {
        return remarque;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "RESPONSABLE", nullable = false)
    public UserProfil getResponsable() {
        return this.responsable.get();
    }

    public void setResponsable(UserProfil responsable) {
        this.responsable.set(responsable);
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "VALIDATION", nullable = false)
    public UserProfil getValidation() {
        return this.validation.get();
    }

    public void setValidation(UserProfil validation) {
        if (validation != null) {
            this.validation.set(validation);
        }
    }

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "planification_document", joinColumns = {
            @JoinColumn(name = "PLANIFICATION", nullable = false, updatable = false)}, inverseJoinColumns = {
            @JoinColumn(name = "DOCUMENT", nullable = false, updatable = false)})
    public List<Document> getDocuments() {
        return this.documents.get();
    }

    public void setDocuments(List<Document> documents) {
        if (documents != null) {
            this.documents.set(FXCollections.observableArrayList(documents));
        }
    }

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "planification_tache", joinColumns = {
            @JoinColumn(name = "PLANIFICATION", nullable = false, updatable = false)}, inverseJoinColumns = {
            @JoinColumn(name = "TACHE", nullable = false, updatable = false)})
    public List<Tache> getTaches() {
        return this.taches.get();
    }

    public void setTaches(List<Tache> taches) {
        if (taches != null) {
            this.taches.set(FXCollections.observableArrayList(taches));
        }
    }


    @Column(name = "COMMENTAIRE", length = 65535)
    public String getCommentaire() {
        return commentaire.get();
    }

    public StringProperty commentaireProperty() {
        return commentaire;
    }

    public void setCommentaire(String commentaire) {
        this.commentaire.set(commentaire);
    }

    public ObjectProperty<UserProfil> validation() {
        return validation;
    }

    public ObjectProperty<UserProfil> responsable() {
        return responsable;
    }

    public ListProperty<Document> documents() {
        return documents;
    }

    @Column(name = "ALERT", length = 1, columnDefinition = "boolean default true")
    public boolean isAlert() {
        return alert.get();
    }

    public BooleanProperty alertProperty() {
        return alert;
    }

    public void setAlert(Boolean alert) {
        this.alert.set(alert);
    }

    @Transient
    public int getDuration() {
        return duration.get();
    }

    public IntegerProperty durationProperty() {
        return duration;
    }

    public void setDuration(int duration) {
        this.duration.set(duration);
    }


    @Override
    public String toString(){
        return this.getSujet() + " " + this.getTaches();
    }
}


